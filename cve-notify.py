import json
import requests
import configparser
import zipfile

config = configparser.ConfigParser()
config.read('config.ini')

# Load configuration variable
metafileUrl = config['METAFILE']['Url']
lastSha256 = config['METAFILE']['LastSha256']
cveRecentUrl = config['CVE-RECENT']['Url']
cveRecentZipFile = config['CVE-RECENT']['ZipFile']
cveRecentJsonFile = config['CVE-RECENT']['JsonFile']
lastCveId = config['CVE-RECENT']['lastCveId']
# print('[-] LastCVEID:', lastCveId)
productsList = config['PRODUCT']['List']
botToken = config['BOT']['Token']
botChatID = config['BOT']['ChatID']
# print(CveRecentJsonFile)


def download(downloadFile, downloadUrl):
    try:
        req = requests.get(downloadUrl)
        with open(downloadFile, 'wb') as f:
            f.write(req.content)
    except:
        print("[!] An error occurred while download ", downloadFile)


def unzip(zipFile, targetFile):
    try:
        with zipfile.ZipFile(zipFile, "r") as zip:
            zip.extract(targetFile)
    except:
        print("[!] An error occurred while unzip ", zipFile)


def loadData(jsonFile):
    try:
        with open(jsonFile, 'r') as f:
            data = json.load(f)
        return data
    except:
        print("[!] An error occurred while loading data from ", jsonFile)


def sendNoti(cveID, cveDescription, cveRef):
    try:
        message = "<strong>" + cveID + '</strong>\r\n' + \
            cveDescription + '\r\nDetails: ' + cveRef
        sendText = 'https://api.telegram.org/bot' + botToken + \
            '/sendMessage?chat_id=' + botChatID + '&parse_mode=HTML&text=' + message
        # print('[INFO]: ', send_text)
        res = requests.get(sendText)
    except:
        print("[!] An error occurred while sending notify ", res.json())


def checkVulns(lastCveId):
    data = loadData(cveRecentJsonFile)
    if data:
        for item in data['CVE_Items']:
            if bool(item['impact']):
                newCveId = item['cve']['CVE_data_meta']['ID']
                print('[+] LastCVEID:', lastCveId)
                print('[+] NewCVEID:', newCveId)
                if((item['impact']['baseMetricV2']['impactScore'] >= 8.5) and (int(newCveId[4:8]) >= int(lastCveId[4:8])) and (int(newCveId[9:]) > int(lastCveId[9:]))):
                    # If Impact == HIGH, checking further
                    for node in item['configurations']['nodes']:
                        # Checking if node is null
                        if bool(node):
                            # If operator is AND, iterate through all element to find products in list
                            # If operator is OR,just checking its element
                            if(node['operator'] == 'AND'):
                                # Checking if node has children key
                                if 'children' in node:
                                    for child in node['children']:
                                        for cpe_match in child['cpe_match']:
                                            if (cpe_match['vulnerable']):
                                                if (cpe_match['cpe23Uri']).split(':')[4] in productsList:
                                                    sendNoti(newCveId,
                                                             item['cve']['description']['description_data'][0]['value'], item['cve']['references']['reference_data'][0]['url'])
                                                    lastCveId = newCveId
                                                    break
                                else:
                                    for cpe_match in node['cpe_match']:
                                        if (cpe_match['vulnerable']):
                                            if (cpe_match['cpe23Uri']).split(':')[4] in productsList:
                                                sendNoti(newCveId, item['cve']['description']
                                                         ['description_data'][0]['value'], item['cve']['references']['reference_data'][0]['url'])
                                                lastCveId = newCveId
                                                break
                            else:
                                for cpe_match in node['cpe_match']:
                                    if (cpe_match['cpe23Uri']).split(':')[4] in productsList:
                                        sendNoti(newCveId, item['cve']['description']
                                                 ['description_data'][0]['value'], item['cve']['references']['reference_data'][0]['url'])
                                        lastCveId = newCveId
                                        break
    return lastCveId


def CheckMeta():
    res = requests.get(metafileUrl)
    newSha256 = res.text.splitlines()[4]
    if lastSha256 != newSha256:
        download(cveRecentZipFile, cveRecentUrl)
        unzip(cveRecentZipFile, cveRecentJsonFile)
        newCveId = checkVulns(lastCveId)
        config.set('METAFILE', 'LastSha256', newSha256)
        config.set('CVE-RECENT', 'lastCveId', newCveId)
        with open('config.ini', 'w') as configFile:
            config.write(configFile)
    else:
        # print('[INFO] Nothing')
        pass


def main():
    try:
        CheckMeta()
    except:
        print('[INFO] An unexpected error occurred.')


if __name__ == "__main__":
    main()
