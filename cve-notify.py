import json
import requests
import configparser
from datetime import datetime, timedelta


config = configparser.ConfigParser()
config.read("config.ini")

logf = open("cve-notify.log", "a")
logf.write("[INFO] Run at {0}\n".format(str(datetime.now())))

# Load configuration variable
api_url = config["API"]["Url"]
# print('[-] Lastcve_id:', lastcve_id)
product_list = config["PRODUCT"]["List"]
bot_token = config["BOT"]["Token"]
bot_chatID = config["BOT"]["ChatID"]
# print(CveRecentJsonFile)

def load_data(api_url):
    try:
        mod_start_date = datetime.now() - timedelta(seconds=7205)
        api_url = (
            api_url
            + mod_start_date.strftime("%Y-%m-%dT%H:%M:%S:000")
            + "%20UTC%2B07:00&includeMatchStringChange=true&resultsPerPage=2000"
        )
        # print(api_url)
        response = requests.get(api_url)
        # print('----------------------------')
        return response
    except Exception as e:
        logf.write("[!] An error occurred while load data.\n {0}".format(str(e)))
        send_notification('ERROR', 'An error occurred while load data', e)


def send_notification(cve_id, cve_description, cve_ref):
    try:
        message = (
            "<strong>"
            + cve_id
            + "</strong>\r\n"
            + cve_description
            + "\r\nDetails: "
            + cve_ref
        )
        send_text = (
            "https://api.telegram.org/bot"
            + bot_token
            + "/sendMessage?chat_id="
            + bot_chatID
            + "&parse_mode=HTML&text="
            + message
        )
        # print('[INFO]: ', send_text)
        res = requests.get(send_text)
    except Exception as e:
        logf.write(
            "[!] An error occurred while sending notify.\n {0} \n {1}".format(
                str(res.json()), str(e)
            )
        )


def check_vulns():
    response = load_data(api_url).json()
    data = response["result"]
    if bool(data):
        for item in data["CVE_Items"]:
            newcve_id = item["cve"]["CVE_data_meta"]["ID"]
            try:
                logf.write("[INFO] {} - {} ".format(newcve_id, item["impact"]["baseMetricV3"]["cvssV3"]["baseScore"]))
            except:
                logf.write("[INFO] {} ".format(newcve_id))
            if (("impact" in item) and bool(item["impact"]) and ("baseMetricV3" in item) and ("configurations" in item) and (float(item["impact"]["baseMetricV3"]["cvssV3"]["baseScore"]) >= 8)):
                for node in item["configurations"]["nodes"]:
                    if (bool(node) and ("children" in node)):
                        for child in node["children"]:
                            for cpe_match in child["cpe_match"]:
                                logf.write("- {}".format(cpe_match["cpe23Uri"]))
                                if (bool(cpe_match["vulnerable"]) and (cpe_match["cpe23Uri"]).split(":")[4] in product_list):
                                        send_notification(newcve_id, item["cve"]["description"]["description_data"][0]["value"], item["cve"]["references"]["reference_data"][0]["url"])
                                        break
                    else:
                        for cpe_match in node["cpe_match"]:
                            if (cpe_match["cpe23Uri"]).split(":")[4] in product_list:
                                send_notification(newcve_id, item["cve"]["description"]["description_data"][0]["value"], item["cve"]["references"]["reference_data"][0]["url"])
                                break
            logf.write("\n") 

def main():
    try:
        check_vulns()
        logf.write("[INFO] Done at {0}\n".format(str(datetime.now())))
        logf.close()
    except Exception as e:
        logf.write("[INFO] An unexpected error occurred.\n{0}".format(str(e)))
        send_notification('ERROR', 'An unexpected error occurred', e)


if __name__ == "__main__":
    main()

